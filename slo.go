// Slo types lifted from github.com/grafana/slo/pkg/generated/models/slo/slo_type_gen.go
package gapi

import (
	"encoding/json"
	"fmt"
)

var sloPath string = "/api/plugins/grafana-slo-app/resources/v1/slo"

type Slos struct {
	Slos []Slo `json:"slos"`
}

// Defines values for QueryType.
const (
	QueryTypeFreeform  QueryType = "freeform"
	QueryTypeHistogram QueryType = "histogram"
	QueryTypeRatio     QueryType = "ratio"
	QueryTypeThreshold QueryType = "threshold"
)

// Defines values for StatusType.
const (
	StatusTypeCreated  StatusType = "created"
	StatusTypeCreating StatusType = "creating"
	StatusTypeDeleting StatusType = "deleting"
	StatusTypeError    StatusType = "error"
	StatusTypeUnknown  StatusType = "unknown"
	StatusTypeUpdated  StatusType = "updated"
	StatusTypeUpdating StatusType = "updating"
)

// Defines values for ThresholdOperator.
const (
	ThresholdOperatorEmpty      ThresholdOperator = "<"
	ThresholdOperatorEqualEqual ThresholdOperator = "=="
	ThresholdOperatorN1         ThresholdOperator = "<="
	ThresholdOperatorN2         ThresholdOperator = ">="
	ThresholdOperatorN3         ThresholdOperator = ">"
)

// Alerting defines model for Alerting.
type Alerting struct {
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations []Label           `json:"annotations,omitempty"`
	FastBurn    *AlertingMetadata `json:"fastBurn,omitempty"`

	// Labels will be attached to all alerts generated by any of these rules.
	Labels   []Label           `json:"labels,omitempty"`
	SlowBurn *AlertingMetadata `json:"slowBurn,omitempty"`
}

// AlertingMetadata defines model for AlertingMetadata.
type AlertingMetadata struct {
	Annotations []Label `json:"annotations,omitempty"`
	Labels      []Label `json:"labels,omitempty"`
}

// DashboardRef defines model for DashboardRef.
type DashboardRef struct {
	UID string `json:"UID"`
}

// DestinationDatasource defines model for DestinationDatasource.
type DestinationDatasource struct {
	// type of the datasource, if not present should default to mimir
	Type *string `json:"type,omitempty"`

	// UID of the datasource, if not present should default to the plugin's configured default datasource
	Uid *string `json:"uid,omitempty"`
}

// FreeformQuery defines model for FreeformQuery.
type FreeformQuery struct {
	Query string `json:"query"`
}

// HistogramQuery defines model for HistogramQuery.
type HistogramQuery struct {
	GroupByLabels []string  `json:"groupByLabels,omitempty"`
	Metric        MetricDef `json:"metric"`
	Percentile    float64   `json:"percentile"`
	Threshold     Threshold `json:"threshold"`
}

// Label defines model for Label.
type Label struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// MetricDef defines model for MetricDef.
type MetricDef struct {
	PrometheusMetric string  `json:"prometheusMetric"`
	Type             *string `json:"type,omitempty"`
}

// Objective defines model for Objective.
type Objective struct {
	// Value is a value between 0 and 1 if the value of the query's output
	// is above the objective, the SLO is met.
	Value float64 `json:"value"`

	// Window is a Prometheus-parsable time duration string like 24h, 60m. This is the time
	// window the objective is measured over.
	Window string `json:"window"`
}

// Query defines model for Query.
type Query struct {
	Freeform  *FreeformQuery  `json:"freeform,omitempty"`
	Histogram *HistogramQuery `json:"histogram,omitempty"`
	Ratio     *RatioQuery     `json:"ratio,omitempty"`
	Threshold *ThresholdQuery `json:"threshold,omitempty"`
	Type      QueryType       `json:"type"`
}

// QueryType defines model for Query.Type.
type QueryType string

// RatioQuery defines model for RatioQuery.
type RatioQuery struct {
	GroupByLabels []string  `json:"groupByLabels,omitempty"`
	SuccessMetric MetricDef `json:"successMetric"`
	TotalMetric   MetricDef `json:"totalMetric"`
}

// ReadOnly defines model for ReadOnly.
type ReadOnly struct {
	DrillDownDashboardRef *DashboardRef `json:"drillDownDashboardRef,omitempty"`

	// Provenance describes the provenance of the creation request, used to indicate As-Code created SLOs
	Provenance *string `json:"provenance,omitempty"`
	Status     *Status `json:"status,omitempty"`
}

// Slo defines model for Slo.
type Slo struct {
	Alerting *Alerting `json:"alerting,omitempty"`

	// Description is a free-text field that can provide more context to an
	// SLO. It is shown on SLO drill-down dashboards and in hover text on
	// the SLO summary dashboard.
	Description           string                 `json:"description"`
	DestinationDatasource *DestinationDatasource `json:"destinationDatasource,omitempty"`

	// Any additional labels that will be attached to all metrics generated
	// from the query. These labels are useful for grouping SLOs in
	// dashboard views that you create by hand.
	// The key must match the prometheus label requirements regex:
	// "^[a-zA-Z_][a-zA-Z0-9_]*$"
	Labels []Label `json:"labels,omitempty"`

	// Name should be a short description of your indicator. Consider names like
	// "API Availability"
	Name string `json:"name"`

	// You can have multiple time windows and objectives associated with an
	// SLO. Over each rolling time window, the remaining error budget will
	// be calculated, and separate alerts can be generated for each time
	// window based on the SLO burn rate or remaining error budget.
	Objectives []Objective `json:"objectives"`
	Query      Query       `json:"query"`
	ReadOnly   *ReadOnly   `json:"readOnly,omitempty"`

	// A unique, random identifier. This value will also be the name of the
	// resource stored in the API server. Must be set for a PUT.
	Uuid string `json:"uuid"`
}

// Status defines model for Status.
type Status struct {
	// Only present if type == "error"
	Message *string    `json:"message,omitempty"`
	Type    StatusType `json:"type"`
}

// StatusType defines model for Status.Type.
type StatusType string

// Threshold defines model for Threshold.
type Threshold struct {
	Operator ThresholdOperator `json:"operator"`
	Value    float64           `json:"value"`
}

// ThresholdOperator defines model for Threshold.Operator.
type ThresholdOperator string

// ThresholdQuery defines model for ThresholdQuery.
type ThresholdQuery struct {
	GroupByLabels []string  `json:"groupByLabels,omitempty"`
	Metric        MetricDef `json:"metric"`
	Threshold     Threshold `json:"threshold"`
}

type CreateSLOResponse struct {
	Message string `json:"message,omitempty"`
	UUID    string `json:"uuid,omitempty"`
}

// ListSlos retrieves a list of all Slos
func (c *Client) ListSlos() (Slos, error) {
	var slos Slos

	if err := c.request("GET", sloPath, nil, nil, &slos); err != nil {
		return Slos{}, err
	}

	return slos, nil
}

// GetSLO returns a single Slo based on its uuid
func (c *Client) GetSlo(uuid string) (Slo, error) {
	var slo Slo
	path := fmt.Sprintf("%s/%s", sloPath, uuid)

	if err := c.request("GET", path, nil, nil, &slo); err != nil {
		return Slo{}, err
	}

	return slo, nil
}

// CreateSLO creates a single Slo
func (c *Client) CreateSlo(slo Slo) (CreateSLOResponse, error) {
	response := CreateSLOResponse{}

	data, err := json.Marshal(slo)
	if err != nil {
		return response, err
	}

	if err := c.request("POST", sloPath, nil, data, &response); err != nil {
		return CreateSLOResponse{}, err
	}

	return response, err
}

// DeleteSLO deletes the Slo with the passed in UUID
func (c *Client) DeleteSlo(uuid string) error {
	path := fmt.Sprintf("%s/%s", sloPath, uuid)
	return c.request("DELETE", path, nil, nil, nil)
}

// UpdateSLO updates the Slo with the passed in UUID and Slo
func (c *Client) UpdateSlo(uuid string, slo Slo) error {
	path := fmt.Sprintf("%s/%s", sloPath, uuid)

	data, err := json.Marshal(slo)
	if err != nil {
		return err
	}

	if err := c.request("PUT", path, nil, data, nil); err != nil {
		return err
	}

	return nil
}
